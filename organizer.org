* remote-shell function
#+begin_src emacs-lisp
(defun remote-shell ( &optional host)
  (interactive)
  (let* ((remote-hostname (or host (chomp (shell-command-to-string "hostname"))))
         (remote-buffer-name (format "*%s*" (car (split-string remote-hostname "\\." ))))
         (default-directory (format "/ssh:%s:" remote-hostname)))
   (if current-prefix-arg
       (shell (generate-new-buffer-name remote-buffer-name))
     (shell remote-buffer-name))))
#+end_src

* example-ido
#+begin_src emacs-lisp
(defun example-ido ()
  (interactive) 
  (message (ido-completing-read "say: " '("b" "a" "c"))))
#+end_src

* write-lines
#+begin_src emacs-lisp
(defun write-lines (lines-list filePath)
  "Return a list of lines of a file at filePath."
    (shell-command (concat "echo \"" (mapconcat 'concat lines-list "\n") "\" > " filePath )))
#+end_src
* read-lines
#+begin_src emacs-lisp
(defun read-lines (filePath)
  "Return a list of lines of a file at filePath."
  (with-temp-buffer
    (insert-file-contents filePath)
    (split-string (buffer-string) "\n" t)))
#+end_src

* my-dancer-shell-hosts function
#+begin_src emacs-lisp
(defvar my-read-hosts-history (or (read-lines "~/.emacs.d/tmp/my-read-hosts-history") '("test")))
(defun my-dancer-shell-hosts ()
  (interactive)
  (let* ((files (file-expand-wildcards "~/.dsh/group/*"))
         (hosts (-mapcat 'read-lines files))
         (host (ido-completing-read "host: " hosts nil nil nil 'my-read-hosts-history (car my-read-hosts-history))))
    (add-to-history 'my-read-hosts-history host 30)
    (write-lines my-read-hosts-history "~/.emacs.d/tmp/my-read-hosts-history")
    host))
#+end_src
* goto-remote-host
#+begin_src emacs-lisp
(defun goto-remote-host ()
  (interactive)
  (remote-shell (my-dancer-shell-hosts)))
#+end_src

* TODO learn emerge maybe use as git.mergetool
* TODO check out the new web-mode.el
